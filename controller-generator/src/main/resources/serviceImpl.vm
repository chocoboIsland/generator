package ${serviceImplPackage};

import site.wangpj.potato.common.microservice.BaseService;
import ${daoPackage}.${daoClassName};
import ${dtoPackage}.${dtoClassName};
import ${servicePackage}.${serviceClassName};
import org.springframework.beans.factory.annotation.Autowired;
import site.wangpj.potato.common.microservice.exception.VersionInvaildException;
import site.wangpj.potato.common.microservice.exception.NoSuchIdException;
import org.springframework.stereotype.Service;

import java.util.List;
@Service
public class ${serviceClassName}Impl extends BaseService implements ${serviceClassName} {

    @Autowired(required = false)
    ${daoClassName} ${daoObjectName};

@Override
    public int deleteByPrimaryKey(Long id) {
        return ${daoObjectName}.deleteByPrimaryKey(id);
    }

    @Override
    public int insert(${dtoClassName} ${dtoObjectName})
    {
        updateFieldWhenCreate(${dtoObjectName});
        return ${daoObjectName}.insert(${dtoObjectName});
    }

    @Override
    public int insertList(List<${dtoClassName}> ${dtoObjectName}List)
    {
        for (${dtoClassName} ${dtoObjectName}:
        ${dtoObjectName}List) {
        updateFieldWhenCreate(${dtoObjectName});
        ${daoObjectName}.insert(${dtoObjectName});
        }
        return 0;
    }

    @Override
    public ${dtoClassName} selectByPrimaryKey(Long id)
    {
        ${dtoClassName} ${dtoClassName}=${daoObjectName}.selectByPrimaryKey(id);
        return ${dtoClassName};
    }

    @Override
    public List<${dtoClassName}> selectAll() {
        return ${daoObjectName}.selectAll();
    }

    @Override
    public List<${dtoClassName}> selectSensitivity(${dtoClassName} ${dtoObjectName})
    {
        return ${daoObjectName}.selectSensitivity(${dtoObjectName});
    }

    @Override
    public int updateByPrimaryKey(${dtoClassName} ${dtoObjectName})
    {
        updateFieldWhenCreate(${dtoObjectName});
        int ${daoObjectName}Line=${daoObjectName}.updateByPrimaryKey(${dtoObjectName});
        if(${daoObjectName}Line==0)
        {
            diagnoseUpdateError(${dtoObjectName});
        }
        return ${daoObjectName}Line;
    }

    @Override
    public int updateByPrimaryKeySelective(${dtoClassName} ${dtoObjectName})
    {
        updateFieldWhenCreate(${dtoObjectName});
        int ${daoObjectName}Line=${daoObjectName}.updateByPrimaryKeySelective(${dtoObjectName});
        if(${daoObjectName}Line==0)
        {
            diagnoseUpdateError(${dtoObjectName});
        }
        return ${daoObjectName}Line;
    }

    //诊断更新错误的原因
    private void diagnoseUpdateError(${dtoClassName} oldDto)
    {
        ${dtoClassName} selectDto = selectByPrimaryKey(oldDto.getId());
        if (selectDto==null)
        {
             throw new NoSuchIdException("not have the id "+selectDto.getId()+",update failed");
        }
        if (oldDto.getVersion()<selectDto.getVersion())
        {
            throw new VersionInvaildException("old version,current new version is "+selectDto.getVersion()+
            "update version is "+oldDto.getVersion()+",update failed");
        }
    }



    @Override
    public int deleteAll() {
    return ${daoObjectName}.deleteAll();
    }
}
