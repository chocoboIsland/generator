package ${controllerPackage};

import ${dtoPackage}.AjaxResponse;
import ${dtoPackage}.${dtoClassName};
import ${servicePackage}.${serviceClassName};
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@RestController
@RequestMapping("/${domain}s")
public class ${controllerClassName} {

    @Autowired
    ${serviceClassName} ${serviceObjectName};

    @PostMapping(value = "/v1" ,produces = "application/json;charset=UTF-8" )
    public AjaxResponse insert(@RequestBody ${dtoClassName} ${dtoObjectName})
    {
        ${serviceObjectName}.insert(${dtoObjectName});
        AjaxResponse ajaxResponse=new AjaxResponse();
        ajaxResponse.setOk(true);
        ajaxResponse.setMessage("insert date succeed");
        ajaxResponse.setCode(200);
        return ajaxResponse;
    }

    @PostMapping(value = "/_m/v1" ,produces = "application/json;charset=UTF-8" )
    public AjaxResponse insertList(@RequestBody List<${dtoClassName}> ${dtoObjectName}List)
    {
        ${serviceObjectName}.insertList(${dtoObjectName}List);
        AjaxResponse ajaxResponse=new AjaxResponse();
        ajaxResponse.setOk(true);
        ajaxResponse.setMessage("insert "+${dtoObjectName}List.size()+" size of data");
        ajaxResponse.setCode(200);
        return ajaxResponse;
    }

    @DeleteMapping(value="/v1",produces = "application/json;charset=UTF-8")
    public AjaxResponse deleteAll()
    {
        ${serviceObjectName}.deleteAll();
        AjaxResponse ajaxResponse=new AjaxResponse();
        ajaxResponse.setOk(true);
        ajaxResponse.setMessage("success");
        ajaxResponse.setCode(200);
        return ajaxResponse;
    }

    @PutMapping(value = "/v1",produces = "application/json;charset=UTF-8")
    public AjaxResponse update(@RequestBody ${dtoClassName} ${dtoObjectName})
    {
        AjaxResponse ajaxResponse=new AjaxResponse();
        try {
        int result=${serviceObjectName}.updateByPrimaryKey(${dtoObjectName});
        ajaxResponse.setOk(true);
        ajaxResponse.setMessage("update success");
        ajaxResponse.setCode(200);
        } catch (Exception e) {
        e.printStackTrace();
        ajaxResponse.setOk(false);
        ajaxResponse.setMessage(e.getMessage());
        ajaxResponse.setCode(400);
        }
        return ajaxResponse;
    }

    @GetMapping(value="/id/{id}/v1",produces = "application/json;charset=UTF-8")
    public AjaxResponse searchById(@PathVariable long id)
    {
    ${dtoClassName} broker=${serviceObjectName}.selectByPrimaryKey(id);
    AjaxResponse ajaxResponse=new AjaxResponse();
    ajaxResponse.setOk(true);
    ajaxResponse.setMessage("search success");
    ajaxResponse.setCode(200);
    ajaxResponse.setData(broker);
    return ajaxResponse;
    }

    @GetMapping(value="/v1",produces = "application/json;charset=UTF-8")
    public AjaxResponse searchAll()
    {
        List<${dtoClassName}> ${dtoObjectName}List=${serviceObjectName}.selectAll();
        int size=${dtoObjectName}List.size();
        AjaxResponse ajaxResponse=new AjaxResponse();
        ajaxResponse.setOk(true);
        ajaxResponse.setMessage("search success,all "+size+" size of data");
        ajaxResponse.setCode(200);
        ajaxResponse.setData(${dtoObjectName}List);
        return ajaxResponse;
    }
}
